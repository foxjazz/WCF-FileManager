//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace TestFileService.FileService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Files", Namespace="http://schemas.datacontract.org/2004/07/FMFilesService")]
    public partial class Files : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime FileDateCreatedField;
        
        private string FileNameField;
        
        private long FileSizeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FileDateCreated {
            get {
                return this.FileDateCreatedField;
            }
            set {
                if ((this.FileDateCreatedField.Equals(value) != true)) {
                    this.FileDateCreatedField = value;
                    this.RaisePropertyChanged("FileDateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileService.IFileService")]
    public interface IFileService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileService/GetFile", ReplyAction="http://tempuri.org/IFileService/GetFileResponse")]
        System.IAsyncResult BeginGetFile(string virtualPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileService/GetFileStream", ReplyAction="http://tempuri.org/IFileService/GetFileStreamResponse")]
        System.IAsyncResult BeginGetFileStream(string virtualPath, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetFileStream(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileService/SendFile", ReplyAction="http://tempuri.org/IFileService/SendFileResponse")]
        System.IAsyncResult BeginSendFile(byte[] b, string Path, System.AsyncCallback callback, object asyncState);
        
        string EndSendFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileService/CheckFileExists", ReplyAction="http://tempuri.org/IFileService/CheckFileExistsResponse")]
        System.IAsyncResult BeginCheckFileExists(string Path, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckFileExists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileService/CreateFolder", ReplyAction="http://tempuri.org/IFileService/CreateFolderResponse")]
        System.IAsyncResult BeginCreateFolder(string Path, System.AsyncCallback callback, object asyncState);
        
        string EndCreateFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileService/RenameFolder", ReplyAction="http://tempuri.org/IFileService/RenameFolderResponse")]
        System.IAsyncResult BeginRenameFolder(string SourceFolder, string DestinationFolder, System.AsyncCallback callback, object asyncState);
        
        string EndRenameFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileService/DeleteFolder", ReplyAction="http://tempuri.org/IFileService/DeleteFolderResponse")]
        System.IAsyncResult BeginDeleteFolder(string Path, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileService/DeleteFile", ReplyAction="http://tempuri.org/IFileService/DeleteFileResponse")]
        System.IAsyncResult BeginDeleteFile(string virtualPath, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileService/GetFolders", ReplyAction="http://tempuri.org/IFileService/GetFoldersResponse")]
        System.IAsyncResult BeginGetFolders(string virtualPath, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetFolders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileService/List", ReplyAction="http://tempuri.org/IFileService/ListResponse")]
        System.IAsyncResult BeginList(string virtualPath, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files> EndList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileService/ListFiles", ReplyAction="http://tempuri.org/IFileService/ListFilesResponse")]
        System.IAsyncResult BeginListFiles(string virtualPath, string Ext, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files> EndListFiles(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileServiceChannel : TestFileService.FileService.IFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckFileExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckFileExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RenameFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RenameFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileServiceClient : System.ServiceModel.ClientBase<TestFileService.FileService.IFileService>, TestFileService.FileService.IFileService {
        
        private BeginOperationDelegate onBeginGetFileDelegate;
        
        private EndOperationDelegate onEndGetFileDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileStreamDelegate;
        
        private EndOperationDelegate onEndGetFileStreamDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileStreamCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendFileDelegate;
        
        private EndOperationDelegate onEndSendFileDelegate;
        
        private System.Threading.SendOrPostCallback onSendFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckFileExistsDelegate;
        
        private EndOperationDelegate onEndCheckFileExistsDelegate;
        
        private System.Threading.SendOrPostCallback onCheckFileExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateFolderDelegate;
        
        private EndOperationDelegate onEndCreateFolderDelegate;
        
        private System.Threading.SendOrPostCallback onCreateFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginRenameFolderDelegate;
        
        private EndOperationDelegate onEndRenameFolderDelegate;
        
        private System.Threading.SendOrPostCallback onRenameFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFolderDelegate;
        
        private EndOperationDelegate onEndDeleteFolderDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFileDelegate;
        
        private EndOperationDelegate onEndDeleteFileDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFoldersDelegate;
        
        private EndOperationDelegate onEndGetFoldersDelegate;
        
        private System.Threading.SendOrPostCallback onGetFoldersCompletedDelegate;
        
        private BeginOperationDelegate onBeginListDelegate;
        
        private EndOperationDelegate onEndListDelegate;
        
        private System.Threading.SendOrPostCallback onListCompletedDelegate;
        
        private BeginOperationDelegate onBeginListFilesDelegate;
        
        private EndOperationDelegate onEndListFilesDelegate;
        
        private System.Threading.SendOrPostCallback onListFilesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FileServiceClient() {
        }
        
        public FileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetFileCompletedEventArgs> GetFileCompleted;
        
        public event System.EventHandler<GetFileStreamCompletedEventArgs> GetFileStreamCompleted;
        
        public event System.EventHandler<SendFileCompletedEventArgs> SendFileCompleted;
        
        public event System.EventHandler<CheckFileExistsCompletedEventArgs> CheckFileExistsCompleted;
        
        public event System.EventHandler<CreateFolderCompletedEventArgs> CreateFolderCompleted;
        
        public event System.EventHandler<RenameFolderCompletedEventArgs> RenameFolderCompleted;
        
        public event System.EventHandler<DeleteFolderCompletedEventArgs> DeleteFolderCompleted;
        
        public event System.EventHandler<DeleteFileCompletedEventArgs> DeleteFileCompleted;
        
        public event System.EventHandler<GetFoldersCompletedEventArgs> GetFoldersCompleted;
        
        public event System.EventHandler<ListCompletedEventArgs> ListCompleted;
        
        public event System.EventHandler<ListFilesCompletedEventArgs> ListFilesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestFileService.FileService.IFileService.BeginGetFile(string virtualPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFile(virtualPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] TestFileService.FileService.IFileService.EndGetFile(System.IAsyncResult result) {
            return base.Channel.EndGetFile(result);
        }
        
        private System.IAsyncResult OnBeginGetFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string virtualPath = ((string)(inValues[0]));
            return ((TestFileService.FileService.IFileService)(this)).BeginGetFile(virtualPath, callback, asyncState);
        }
        
        private object[] OnEndGetFile(System.IAsyncResult result) {
            byte[] retVal = ((TestFileService.FileService.IFileService)(this)).EndGetFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileCompleted(object state) {
            if ((this.GetFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileCompleted(this, new GetFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileAsync(string virtualPath) {
            this.GetFileAsync(virtualPath, null);
        }
        
        public void GetFileAsync(string virtualPath, object userState) {
            if ((this.onBeginGetFileDelegate == null)) {
                this.onBeginGetFileDelegate = new BeginOperationDelegate(this.OnBeginGetFile);
            }
            if ((this.onEndGetFileDelegate == null)) {
                this.onEndGetFileDelegate = new EndOperationDelegate(this.OnEndGetFile);
            }
            if ((this.onGetFileCompletedDelegate == null)) {
                this.onGetFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileDelegate, new object[] {
                        virtualPath}, this.onEndGetFileDelegate, this.onGetFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestFileService.FileService.IFileService.BeginGetFileStream(string virtualPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileStream(virtualPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] TestFileService.FileService.IFileService.EndGetFileStream(System.IAsyncResult result) {
            return base.Channel.EndGetFileStream(result);
        }
        
        private System.IAsyncResult OnBeginGetFileStream(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string virtualPath = ((string)(inValues[0]));
            return ((TestFileService.FileService.IFileService)(this)).BeginGetFileStream(virtualPath, callback, asyncState);
        }
        
        private object[] OnEndGetFileStream(System.IAsyncResult result) {
            byte[] retVal = ((TestFileService.FileService.IFileService)(this)).EndGetFileStream(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileStreamCompleted(object state) {
            if ((this.GetFileStreamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileStreamCompleted(this, new GetFileStreamCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileStreamAsync(string virtualPath) {
            this.GetFileStreamAsync(virtualPath, null);
        }
        
        public void GetFileStreamAsync(string virtualPath, object userState) {
            if ((this.onBeginGetFileStreamDelegate == null)) {
                this.onBeginGetFileStreamDelegate = new BeginOperationDelegate(this.OnBeginGetFileStream);
            }
            if ((this.onEndGetFileStreamDelegate == null)) {
                this.onEndGetFileStreamDelegate = new EndOperationDelegate(this.OnEndGetFileStream);
            }
            if ((this.onGetFileStreamCompletedDelegate == null)) {
                this.onGetFileStreamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileStreamCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileStreamDelegate, new object[] {
                        virtualPath}, this.onEndGetFileStreamDelegate, this.onGetFileStreamCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestFileService.FileService.IFileService.BeginSendFile(byte[] b, string Path, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendFile(b, Path, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string TestFileService.FileService.IFileService.EndSendFile(System.IAsyncResult result) {
            return base.Channel.EndSendFile(result);
        }
        
        private System.IAsyncResult OnBeginSendFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] b = ((byte[])(inValues[0]));
            string Path = ((string)(inValues[1]));
            return ((TestFileService.FileService.IFileService)(this)).BeginSendFile(b, Path, callback, asyncState);
        }
        
        private object[] OnEndSendFile(System.IAsyncResult result) {
            string retVal = ((TestFileService.FileService.IFileService)(this)).EndSendFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendFileCompleted(object state) {
            if ((this.SendFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendFileCompleted(this, new SendFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendFileAsync(byte[] b, string Path) {
            this.SendFileAsync(b, Path, null);
        }
        
        public void SendFileAsync(byte[] b, string Path, object userState) {
            if ((this.onBeginSendFileDelegate == null)) {
                this.onBeginSendFileDelegate = new BeginOperationDelegate(this.OnBeginSendFile);
            }
            if ((this.onEndSendFileDelegate == null)) {
                this.onEndSendFileDelegate = new EndOperationDelegate(this.OnEndSendFile);
            }
            if ((this.onSendFileCompletedDelegate == null)) {
                this.onSendFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendFileCompleted);
            }
            base.InvokeAsync(this.onBeginSendFileDelegate, new object[] {
                        b,
                        Path}, this.onEndSendFileDelegate, this.onSendFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestFileService.FileService.IFileService.BeginCheckFileExists(string Path, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckFileExists(Path, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TestFileService.FileService.IFileService.EndCheckFileExists(System.IAsyncResult result) {
            return base.Channel.EndCheckFileExists(result);
        }
        
        private System.IAsyncResult OnBeginCheckFileExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Path = ((string)(inValues[0]));
            return ((TestFileService.FileService.IFileService)(this)).BeginCheckFileExists(Path, callback, asyncState);
        }
        
        private object[] OnEndCheckFileExists(System.IAsyncResult result) {
            bool retVal = ((TestFileService.FileService.IFileService)(this)).EndCheckFileExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckFileExistsCompleted(object state) {
            if ((this.CheckFileExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckFileExistsCompleted(this, new CheckFileExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckFileExistsAsync(string Path) {
            this.CheckFileExistsAsync(Path, null);
        }
        
        public void CheckFileExistsAsync(string Path, object userState) {
            if ((this.onBeginCheckFileExistsDelegate == null)) {
                this.onBeginCheckFileExistsDelegate = new BeginOperationDelegate(this.OnBeginCheckFileExists);
            }
            if ((this.onEndCheckFileExistsDelegate == null)) {
                this.onEndCheckFileExistsDelegate = new EndOperationDelegate(this.OnEndCheckFileExists);
            }
            if ((this.onCheckFileExistsCompletedDelegate == null)) {
                this.onCheckFileExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckFileExistsCompleted);
            }
            base.InvokeAsync(this.onBeginCheckFileExistsDelegate, new object[] {
                        Path}, this.onEndCheckFileExistsDelegate, this.onCheckFileExistsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestFileService.FileService.IFileService.BeginCreateFolder(string Path, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateFolder(Path, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string TestFileService.FileService.IFileService.EndCreateFolder(System.IAsyncResult result) {
            return base.Channel.EndCreateFolder(result);
        }
        
        private System.IAsyncResult OnBeginCreateFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Path = ((string)(inValues[0]));
            return ((TestFileService.FileService.IFileService)(this)).BeginCreateFolder(Path, callback, asyncState);
        }
        
        private object[] OnEndCreateFolder(System.IAsyncResult result) {
            string retVal = ((TestFileService.FileService.IFileService)(this)).EndCreateFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateFolderCompleted(object state) {
            if ((this.CreateFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateFolderCompleted(this, new CreateFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateFolderAsync(string Path) {
            this.CreateFolderAsync(Path, null);
        }
        
        public void CreateFolderAsync(string Path, object userState) {
            if ((this.onBeginCreateFolderDelegate == null)) {
                this.onBeginCreateFolderDelegate = new BeginOperationDelegate(this.OnBeginCreateFolder);
            }
            if ((this.onEndCreateFolderDelegate == null)) {
                this.onEndCreateFolderDelegate = new EndOperationDelegate(this.OnEndCreateFolder);
            }
            if ((this.onCreateFolderCompletedDelegate == null)) {
                this.onCreateFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateFolderCompleted);
            }
            base.InvokeAsync(this.onBeginCreateFolderDelegate, new object[] {
                        Path}, this.onEndCreateFolderDelegate, this.onCreateFolderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestFileService.FileService.IFileService.BeginRenameFolder(string SourceFolder, string DestinationFolder, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRenameFolder(SourceFolder, DestinationFolder, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string TestFileService.FileService.IFileService.EndRenameFolder(System.IAsyncResult result) {
            return base.Channel.EndRenameFolder(result);
        }
        
        private System.IAsyncResult OnBeginRenameFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SourceFolder = ((string)(inValues[0]));
            string DestinationFolder = ((string)(inValues[1]));
            return ((TestFileService.FileService.IFileService)(this)).BeginRenameFolder(SourceFolder, DestinationFolder, callback, asyncState);
        }
        
        private object[] OnEndRenameFolder(System.IAsyncResult result) {
            string retVal = ((TestFileService.FileService.IFileService)(this)).EndRenameFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRenameFolderCompleted(object state) {
            if ((this.RenameFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RenameFolderCompleted(this, new RenameFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RenameFolderAsync(string SourceFolder, string DestinationFolder) {
            this.RenameFolderAsync(SourceFolder, DestinationFolder, null);
        }
        
        public void RenameFolderAsync(string SourceFolder, string DestinationFolder, object userState) {
            if ((this.onBeginRenameFolderDelegate == null)) {
                this.onBeginRenameFolderDelegate = new BeginOperationDelegate(this.OnBeginRenameFolder);
            }
            if ((this.onEndRenameFolderDelegate == null)) {
                this.onEndRenameFolderDelegate = new EndOperationDelegate(this.OnEndRenameFolder);
            }
            if ((this.onRenameFolderCompletedDelegate == null)) {
                this.onRenameFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRenameFolderCompleted);
            }
            base.InvokeAsync(this.onBeginRenameFolderDelegate, new object[] {
                        SourceFolder,
                        DestinationFolder}, this.onEndRenameFolderDelegate, this.onRenameFolderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestFileService.FileService.IFileService.BeginDeleteFolder(string Path, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFolder(Path, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string TestFileService.FileService.IFileService.EndDeleteFolder(System.IAsyncResult result) {
            return base.Channel.EndDeleteFolder(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Path = ((string)(inValues[0]));
            return ((TestFileService.FileService.IFileService)(this)).BeginDeleteFolder(Path, callback, asyncState);
        }
        
        private object[] OnEndDeleteFolder(System.IAsyncResult result) {
            string retVal = ((TestFileService.FileService.IFileService)(this)).EndDeleteFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFolderCompleted(object state) {
            if ((this.DeleteFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFolderCompleted(this, new DeleteFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFolderAsync(string Path) {
            this.DeleteFolderAsync(Path, null);
        }
        
        public void DeleteFolderAsync(string Path, object userState) {
            if ((this.onBeginDeleteFolderDelegate == null)) {
                this.onBeginDeleteFolderDelegate = new BeginOperationDelegate(this.OnBeginDeleteFolder);
            }
            if ((this.onEndDeleteFolderDelegate == null)) {
                this.onEndDeleteFolderDelegate = new EndOperationDelegate(this.OnEndDeleteFolder);
            }
            if ((this.onDeleteFolderCompletedDelegate == null)) {
                this.onDeleteFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFolderCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFolderDelegate, new object[] {
                        Path}, this.onEndDeleteFolderDelegate, this.onDeleteFolderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestFileService.FileService.IFileService.BeginDeleteFile(string virtualPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFile(virtualPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string TestFileService.FileService.IFileService.EndDeleteFile(System.IAsyncResult result) {
            return base.Channel.EndDeleteFile(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string virtualPath = ((string)(inValues[0]));
            return ((TestFileService.FileService.IFileService)(this)).BeginDeleteFile(virtualPath, callback, asyncState);
        }
        
        private object[] OnEndDeleteFile(System.IAsyncResult result) {
            string retVal = ((TestFileService.FileService.IFileService)(this)).EndDeleteFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFileCompleted(object state) {
            if ((this.DeleteFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFileCompleted(this, new DeleteFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFileAsync(string virtualPath) {
            this.DeleteFileAsync(virtualPath, null);
        }
        
        public void DeleteFileAsync(string virtualPath, object userState) {
            if ((this.onBeginDeleteFileDelegate == null)) {
                this.onBeginDeleteFileDelegate = new BeginOperationDelegate(this.OnBeginDeleteFile);
            }
            if ((this.onEndDeleteFileDelegate == null)) {
                this.onEndDeleteFileDelegate = new EndOperationDelegate(this.OnEndDeleteFile);
            }
            if ((this.onDeleteFileCompletedDelegate == null)) {
                this.onDeleteFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFileCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFileDelegate, new object[] {
                        virtualPath}, this.onEndDeleteFileDelegate, this.onDeleteFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestFileService.FileService.IFileService.BeginGetFolders(string virtualPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFolders(virtualPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> TestFileService.FileService.IFileService.EndGetFolders(System.IAsyncResult result) {
            return base.Channel.EndGetFolders(result);
        }
        
        private System.IAsyncResult OnBeginGetFolders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string virtualPath = ((string)(inValues[0]));
            return ((TestFileService.FileService.IFileService)(this)).BeginGetFolders(virtualPath, callback, asyncState);
        }
        
        private object[] OnEndGetFolders(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((TestFileService.FileService.IFileService)(this)).EndGetFolders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFoldersCompleted(object state) {
            if ((this.GetFoldersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFoldersCompleted(this, new GetFoldersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFoldersAsync(string virtualPath) {
            this.GetFoldersAsync(virtualPath, null);
        }
        
        public void GetFoldersAsync(string virtualPath, object userState) {
            if ((this.onBeginGetFoldersDelegate == null)) {
                this.onBeginGetFoldersDelegate = new BeginOperationDelegate(this.OnBeginGetFolders);
            }
            if ((this.onEndGetFoldersDelegate == null)) {
                this.onEndGetFoldersDelegate = new EndOperationDelegate(this.OnEndGetFolders);
            }
            if ((this.onGetFoldersCompletedDelegate == null)) {
                this.onGetFoldersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFoldersCompleted);
            }
            base.InvokeAsync(this.onBeginGetFoldersDelegate, new object[] {
                        virtualPath}, this.onEndGetFoldersDelegate, this.onGetFoldersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestFileService.FileService.IFileService.BeginList(string virtualPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginList(virtualPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files> TestFileService.FileService.IFileService.EndList(System.IAsyncResult result) {
            return base.Channel.EndList(result);
        }
        
        private System.IAsyncResult OnBeginList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string virtualPath = ((string)(inValues[0]));
            return ((TestFileService.FileService.IFileService)(this)).BeginList(virtualPath, callback, asyncState);
        }
        
        private object[] OnEndList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files> retVal = ((TestFileService.FileService.IFileService)(this)).EndList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnListCompleted(object state) {
            if ((this.ListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListCompleted(this, new ListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListAsync(string virtualPath) {
            this.ListAsync(virtualPath, null);
        }
        
        public void ListAsync(string virtualPath, object userState) {
            if ((this.onBeginListDelegate == null)) {
                this.onBeginListDelegate = new BeginOperationDelegate(this.OnBeginList);
            }
            if ((this.onEndListDelegate == null)) {
                this.onEndListDelegate = new EndOperationDelegate(this.OnEndList);
            }
            if ((this.onListCompletedDelegate == null)) {
                this.onListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListCompleted);
            }
            base.InvokeAsync(this.onBeginListDelegate, new object[] {
                        virtualPath}, this.onEndListDelegate, this.onListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestFileService.FileService.IFileService.BeginListFiles(string virtualPath, string Ext, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListFiles(virtualPath, Ext, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files> TestFileService.FileService.IFileService.EndListFiles(System.IAsyncResult result) {
            return base.Channel.EndListFiles(result);
        }
        
        private System.IAsyncResult OnBeginListFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string virtualPath = ((string)(inValues[0]));
            string Ext = ((string)(inValues[1]));
            return ((TestFileService.FileService.IFileService)(this)).BeginListFiles(virtualPath, Ext, callback, asyncState);
        }
        
        private object[] OnEndListFiles(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files> retVal = ((TestFileService.FileService.IFileService)(this)).EndListFiles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnListFilesCompleted(object state) {
            if ((this.ListFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListFilesCompleted(this, new ListFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListFilesAsync(string virtualPath, string Ext) {
            this.ListFilesAsync(virtualPath, Ext, null);
        }
        
        public void ListFilesAsync(string virtualPath, string Ext, object userState) {
            if ((this.onBeginListFilesDelegate == null)) {
                this.onBeginListFilesDelegate = new BeginOperationDelegate(this.OnBeginListFiles);
            }
            if ((this.onEndListFilesDelegate == null)) {
                this.onEndListFilesDelegate = new EndOperationDelegate(this.OnEndListFiles);
            }
            if ((this.onListFilesCompletedDelegate == null)) {
                this.onListFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListFilesCompleted);
            }
            base.InvokeAsync(this.onBeginListFilesDelegate, new object[] {
                        virtualPath,
                        Ext}, this.onEndListFilesDelegate, this.onListFilesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TestFileService.FileService.IFileService CreateChannel() {
            return new FileServiceClientChannel(this);
        }
        
        private class FileServiceClientChannel : ChannelBase<TestFileService.FileService.IFileService>, TestFileService.FileService.IFileService {
            
            public FileServiceClientChannel(System.ServiceModel.ClientBase<TestFileService.FileService.IFileService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetFile(string virtualPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = virtualPath;
                System.IAsyncResult _result = base.BeginInvoke("GetFile", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileStream(string virtualPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = virtualPath;
                System.IAsyncResult _result = base.BeginInvoke("GetFileStream", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetFileStream(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetFileStream", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendFile(byte[] b, string Path, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = b;
                _args[1] = Path;
                System.IAsyncResult _result = base.BeginInvoke("SendFile", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSendFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SendFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCheckFileExists(string Path, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Path;
                System.IAsyncResult _result = base.BeginInvoke("CheckFileExists", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndCheckFileExists(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("CheckFileExists", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateFolder(string Path, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Path;
                System.IAsyncResult _result = base.BeginInvoke("CreateFolder", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCreateFolder(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CreateFolder", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRenameFolder(string SourceFolder, string DestinationFolder, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SourceFolder;
                _args[1] = DestinationFolder;
                System.IAsyncResult _result = base.BeginInvoke("RenameFolder", _args, callback, asyncState);
                return _result;
            }
            
            public string EndRenameFolder(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("RenameFolder", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFolder(string Path, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Path;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFolder", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteFolder(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteFolder", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFile(string virtualPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = virtualPath;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFile", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFolders(string virtualPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = virtualPath;
                System.IAsyncResult _result = base.BeginInvoke("GetFolders", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetFolders(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetFolders", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginList(string virtualPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = virtualPath;
                System.IAsyncResult _result = base.BeginInvoke("List", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files> EndList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files> _result = ((System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files>)(base.EndInvoke("List", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginListFiles(string virtualPath, string Ext, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = virtualPath;
                _args[1] = Ext;
                System.IAsyncResult _result = base.BeginInvoke("ListFiles", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files> EndListFiles(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files> _result = ((System.Collections.ObjectModel.ObservableCollection<TestFileService.FileService.Files>)(base.EndInvoke("ListFiles", _args, result)));
                return _result;
            }
        }
    }
}
